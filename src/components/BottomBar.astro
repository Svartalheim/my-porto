---
import { Plus, Minus } from 'lucide-react';
import LogoR from 'public/logo/etc-logo/logo_r_compact.svg';
import { Button } from './ui/button';
import LogorRepeat from '@assets/images/logo_r_repeat.png';
import ImageWorkNavbar from '@assets/images/work-navbar.png';
import ImageAboutNavbar from '@assets/images/about.png';
import ImageServiceNavbar from '@assets/images/service.png';

import { Image } from 'astro:assets';
const currentPath = Astro.url.pathname;
const normalizePath = (p: string) => (p === '/' ? '/' : p.replace(/\/+$/, ''));

type NavItem = { href: string; label: string; image?: ImageMetadata };
const NAV_ITEMS: NavItem[] = [
  { href: '/', label: 'Homepage' },
  { href: '/about', label: 'About', image: ImageAboutNavbar },
  { href: '/services', label: 'Services', image: ImageServiceNavbar },
  { href: '/work', label: 'Work', image: ImageWorkNavbar },
];
---

<nav
  id='bottom-bar'
  transition:persist
  class='fixed bottom-[var(--navbar-bottom)] transform h-[var(--navbar-height)] left-[var(--navbar-left)] w-navbar'
>
  <div
    id='collapsed-bar'
    class='bg-black cursor-pointer z-[1] relative text-white rounded-[20px] flex flex-col'
    style='--collapsed-bg-alpha: 1;'
  >
    <div
      id='main-bar-content'
      class='h-[var(--navbar-height)] flex items-center justify-between px-[12px] gap-1 lg:px-[24px]'
    >
      <div class='relative w-8 h-8 overflow-hidden' id='svg-container'>
        <div
          id='r-logo'
          class='w-8 h-8 absolute flex items-center justify-center'
        >
          <svg
            width='24'
            height='24'
            viewBox='0 0 31 50'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
            data-letter='r'
            preserveAspectRatio='xMidYMid meet'
          >
            <path
              fill-rule='evenodd'
              clip-rule='evenodd'
              d='M16.8815 49.1619V40L0 40V90C0 90 3.01762 70.6614 12 64C17.9391 59.5955 30 58.1272 30 58.1272V40C28.8737 40.107 27.7341 40.0644 26.6133 40.0225C22.6745 39.8753 18.967 42.7685 16.8815 49.1619Z'
              fill='currentColor'
              class='fill-white'
              transform='translate(0, -40)'></path>
          </svg>
        </div>

        <div
          id='arrow-icon'
          class='w-8 h-8 absolute flex items-center justify-center'
        >
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='24'
            height='24'
            viewBox='0 0 22 22'
            ><path
              fill='currentColor'
              d='M10 3H8v1H7v1H6v1H5v1H4v2h2V8h1V7h1v4h1v2h1v1h2v1h7v-2h-6v-1h-2v-2h-1V7h1v1h1v1h2V7h-1V6h-1V5h-1V4h-1'
            ></path>
          </svg>
        </div>
      </div>

      <div
        class='relative overflow-hidden h-6 flex-1 ml-0 text-sm font-light'
        id='text-container'
      >
        <div
          class='absolute w-full h-full flex items-center'
          id='default-text'
          style='top: 0;'
        >
          <span>Portfolio</span>
        </div>

        <div class='absolute w-full h-full flex items-center' id='hover-text'>
          <span>Open Menu</span>
        </div>
      </div>
      <button class='relative z-[1]' id='menu-toggle-button'>
        <div
          id='plus-icon'
          class='absolute -translate-x-1/2 -left-2 top-1/2 -translate-y-1/2'
        >
          <Plus size={24} className='cursor-pointer' />
        </div>
        <div
          id='minus-icon'
          class='absolute -translate-x-1/2 -left-2 top-1/2 -translate-y-1/2'
        >
          <Minus size={24} className='cursor-pointer' />
        </div>
        <span class='span-menu'>Open / Close Menu</span>
      </button>
    </div>
  </div>

  <div
    id='expanded-content'
    class='opacity-0 absolute bottom-0 w-full rounded-[20px] pointer-events-none overflow-hidden'
    style='height: var(--navbar-height);'
  >
    <div class='blurred-background h-full absolute w-full pointer-events-none'>
    </div>
    <div id='menu-container' class='h-auto flex flex-col menu-container opacity-0 relative'>
      <header class='pt-[30px] p-5 relative flex justify-between items-end'>
        <div class='relative'>
          <a
            data-astro-prefetch
            href={'/'}
            title='home'
            class='relative inline-block'
            id='logo-close-menu'
            data-close-menu='true'
          >
            <LogoR height={36} class='text-white' />
          </a>
          <p class='text-white mt-2 p-large whitespace-pre-line'>
            <span class='whitespace-pre-line'> My</span><span> Portfolio </span>
          </p>
        </div>
        <Button type='button' variant={'secondary'}> Hello </Button>
      </header>
      <div class='!bg-background/10 !opacity-100 w-full h-[1px]'></div>
      <ul class='menu-pages relative flex flex-col p-large'>
        {
          NAV_ITEMS.map(({ href, label, image }) => {
            const nHref = normalizePath(href);
            const nCurrent = normalizePath(currentPath);
            const isExact = nCurrent === nHref;
            const isActive =
              nHref === '/'
                ? isExact
                : nCurrent === nHref || nCurrent.startsWith(nHref + '/');
            return (
              <li class='relative'>
                <div class='page-navigator'>
                  <a
                    data-astro-prefetch
                    href={href}
                    class:list={{
                      page: true,
                      '-active': isActive,
                      '-exact': isExact,
                    }}
                    data-close-menu='true'
                  >
                    <figure class='relative'>
                      <Image
                        src={image ?? LogorRepeat}
                        width={180}
                        height={140}
                        alt={`${label} preview image`}
                      />
                    </figure>
                    <span>{label}</span>
                  </a>
                </div>
              </li>
            );
          })
        }
      </ul>
      <ul class='p-5 relative socials w-fit p-tiny mt-auto'>
        <li>
          <a target='_blank' href='https://www.linkedin.com/in/jamilss1437/'
            >Linkedin</a
          >
        </li>
        <li>
          <a target='_blank' href='https://discord.com/users/572704110999240704'
            >Discord</a
          >
        </li>
        <li>
          <a target='_blank' href='https://github.com/Svartalheim'>Github</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<style>
  #bottom-bar {
    z-index: 10;
  }
  .socials {
    pointer-events: all;
  }
  .socials a {
    position: relative;
    z-index: 3;
  }
  .socials a:hover {
    filter: brightness(0.5);
    transition: transform 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
    will-change: transform;
  }
  .page-navigator .-active.-exact:before {
    transform: translateX(0);
    opacity: 0.05;
  }
  .page-navigator > a:before {
    content: '';
    position: absolute;
    inset: 0;
    display: block;
    background: linear-gradient(90deg, #fff 0, transparent 90%);
    opacity: 0.025;
    transform: translateX(-100%);
    transition: transform 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
    will-change: transform;
  }

  @media (hover: hover) and (pointer: fine) {
    .page-navigator > a:hover:before {
      transform: translateX(0);
    }
  }
  .page-navigator a.-active.-exact {
    filter: brightness(0.5);
    pointer-events: none;
  }
  .page-navigator {
    position: relative;
    display: flex;
    /* Adjustable transparent border using background color */
    border-bottom: 1px solid
      color-mix(
        in oklab,
        var(--background) var(--page-nav-border-opacity, 12%),
        transparent
      );
  }
  .page-navigator a {
    padding: 12px 20px;
    flex-grow: 1;
    display: flex;
    align-items: center;
    gap: 16px;
    font-weight: 300;
    /* anchor remains clean; add border to this if desired */
    /* padding: var(--y-padding) var(--x-padding); */
    padding-right: 8px;
    transition: filter 0.2s ease;
    /* cursor: none; */
    position: relative;
  }
  .menu-pages figure img {
    width: clamp(77px, 73.139px + 100vw * 0.0099, 90px);
    height: clamp(60px, 57.036px + 100vw * 0.0076, 70px);
    object-fit: cover;
  }
  /* Ensure figure has an explicit base width so hover width can animate from a number, not 'auto' */
  .page-navigator a > figure {
    width: clamp(77px, 73.139px + 100vw * 0.0099, 90px);
  }

  @media (hover: hover) and (pointer: fine) {
    .page-navigator a > span {
      transition: transform 0.2s cubic-bezier(0.77, 0, 0.175, 1);
      transition-property: transform, opacity;
      will-change: transform, opacity;
    }
  }
  @media (hover: hover) and (pointer: fine) {
    .page-navigator a:hover > span {
      transform: translateX(8px);
    }
  }

  @media (hover: hover) and (pointer: fine) {
    .page-navigator a > figure,
    .page-navigator a > figure img {
      transition: width 0.3s cubic-bezier(0.2, 0, 0, 1);
      will-change: width;
    }
  }
  @media (hover: hover) and (pointer: fine) {
    .page-navigator a:hover > figure,
    .page-navigator a:hover > figure img {
      width: clamp(90px, 86.412px + 100vw * 0.0092, 102px);
    }
  }
  .span-menu {
    position: absolute;
    width: calc(var(--navbar-width) + 16px);
    height: calc(100% + 32px);
    right: -24px;
    top: -16px;
    overflow: hidden;
    opacity: 0;
    cursor: pointer;
  }
  /* When menu is open, don't let the big invisible button overlay intercept clicks */
  /* #bottom-bar[data-open='true'] #menu-toggle-button,
  #bottom-bar[data-open='true'] #menu-toggle-button .span-menu {
    pointer-events: none;
  } */

  .blurred-background {
    position: absolute;
    inset: 0;
    background: black;
    border-radius: inherit;
    background-clip: padding-box;
    box-shadow:
      0 4px 24px -8px rgba(0, 0, 0, 0.6),
      0 0 0 1px rgba(255, 255, 255, 0.04) inset,
      0 1px 0 0 rgba(255, 255, 255, 0.1) inset;
    overflow: hidden;
    isolation: isolate;
    will-change: backdrop-filter, background-color;
  }

  /* subtle grain overlay */
  .blurred-background::after {
    content: '';
    position: absolute;
    inset: 0;
    pointer-events: none;
    /* SVG fractal noise as data URI */
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='128' height='128'><filter id='n'><feTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='2' stitchTiles='stitch'/></filter><rect width='100%' height='100%' filter='url(%23n)' opacity='0.35'/></svg>");
    background-size: 128px 128px;
    opacity: 0.7; /* grain strength */
    mix-blend-mode: overlay; /* sits nicely on light/dark */
  }
  /* Control the collapsed bar's background alpha without affecting its children */
  #collapsed-bar {
    background-color: rgba(0, 0, 0, var(--collapsed-bg-alpha, 1));
  }

  #expanded-content {
    transform-origin: bottom;
    backdrop-filter: blur(12px) saturate(100%);
    -webkit-backdrop-filter: blur(12px) saturate(100%);
    will-change: transform, opacity, filter;
  }

  .menu-container {
    max-height: calc(100svh - 2 * var(--navbar-bottom));
    min-height: 80lvh;
    color: var(--color-primary-foreground);
  }
</style>

<script>
  import { gsap } from 'gsap';

  // Global type declarations
  declare global {
    interface Window {
      __bottomBarExpanded?: boolean;
      __lenis?: {
        stop?: () => void;
        start?: () => void;
      };
    }
  }

  // Animation constants
  const ANIMATION_DISTANCE = 32;
  const HOVER_DURATION = 1;
  const MENU_DURATION = 0.3;
  const svgContainer = document.getElementById('svg-container');
  const textContainer = document.getElementById('text-container');
  const leftGroup = [svgContainer, textContainer];

  let currentOverlay: HTMLElement | null = null;
  let isExpanded = false; // Move this to global scope
  let closeMenuFunc: (() => void) | null = null; // Store reference to close function
  let isNavigatingAfterMenuClose = false; // Flag to prevent recursion
  let keepBlurForNavigation = false; // Flag to keep blur during navigation
  let overlayClickHandler: (() => void) | null = null; // Store reference to avoid duplicate listeners

  function refreshOverlayReference(): void {
    // Clean up old event listener if it exists
    if (currentOverlay && overlayClickHandler) {
      currentOverlay.removeEventListener('click', overlayClickHandler);
    }

    // Get fresh element reference
    currentOverlay = document.getElementById('bottom-bar-overlay');

    // Create new event handler and attach it
    if (currentOverlay && closeMenuFunc) {
      overlayClickHandler = () => {
        if (isExpanded) closeMenuFunc?.();
      };
      currentOverlay.addEventListener('click', overlayClickHandler);
    }
  }

  // Bottom bar menu functionality
  function initBottomBar(): void {
    // Guard against double-initialization on the same element (e.g., initial load + astro:page-load)
    const bottomBar = document.getElementById('bottom-bar');
    if (!bottomBar) return;

    // Check if this is a re-initialization after page transition
    const isReInit =
      bottomBar instanceof HTMLElement &&
      bottomBar.dataset.initialized === 'true';

    if (isReInit) {
      // Just refresh overlay reference for page transitions
      // Note: closeMenuFunc should already be set from the initial initialization
      refreshOverlayReference();
      return;
    }

    if (bottomBar instanceof HTMLElement) {
      bottomBar.dataset.initialized = 'true';
    }

    const collapsedBar = document.getElementById('collapsed-bar');
    const expandedContent = document.getElementById('expanded-content');
    const menuContainer = document.getElementById('menu-container');
    const blurredBackground = document.querySelector(
      '#expanded-content .blurred-background'
    );
    const closeMenu = document.getElementById('close-menu');
    const mainBarContent = document.getElementById('main-bar-content');
    const menuToggleButton = document.getElementById('menu-toggle-button');
    const plusIcon = document.getElementById('plus-icon');
    const minusIcon = document.getElementById('minus-icon');

    // GSAP Animation elements
    const rLogo = document.getElementById('r-logo');
    const arrowIcon = document.getElementById('arrow-icon');
    const defaultText = document.getElementById('default-text');
    const hoverText = document.getElementById('hover-text');

    // Expose expanded state globally for other scripts to access
    window.__bottomBarExpanded = false;

    gsap.set(rLogo, { y: 0 }); // rLogo in view
    gsap.set(defaultText, { y: 0 }); // defaultText in view
    gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE }); // arrowIcon hidden above
    gsap.set(hoverText, { y: ANIMATION_DISTANCE }); // hoverText hidden below

    // Set initial icon states
    gsap.set(plusIcon, { opacity: 1, rotation: 0 });
    gsap.set(minusIcon, { opacity: 0, rotation: 90 });

    let hoverTl = gsap.timeline({ paused: true });

    hoverTl
      .to(
        rLogo,
        {
          y: -ANIMATION_DISTANCE,
          duration: HOVER_DURATION,
          ease: 'sine.inOut',
        },
        0
      )
      .to(arrowIcon, { y: 0, duration: HOVER_DURATION, ease: 'sine.inOut' }, 0)
      .to(
        defaultText,
        {
          y: ANIMATION_DISTANCE,
          duration: HOVER_DURATION,
          ease: 'sine.inOut',
        },
        0
      )
      .to(hoverText, { y: 0, duration: HOVER_DURATION, ease: 'sine.inOut' }, 0);

    hoverTl.eventCallback('onReverseComplete', () => {
      gsap.set(rLogo, { y: 0 });
      gsap.set(defaultText, { y: 0 });
      gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE });
      gsap.set(hoverText, { y: ANIMATION_DISTANCE });
    });

    // Mouse enter - play animation (only if not expanded)
    mainBarContent?.addEventListener('mouseenter', () => {
      if (!isExpanded) {
        hoverTl.play();
      }
    });

    // Mouse leave - reverse animation (only if not expanded)
    mainBarContent?.addEventListener('mouseleave', () => {
      if (!isExpanded) {
        hoverTl.reverse();
      }
    });

    // helper to resolve a CSS var (even if it uses calc/clamp) into px
    function resolveVarPx(varName: string, fallback: string = '56px'): string {
      const probe = document.createElement('div');
      probe.style.position = 'absolute';
      probe.style.visibility = 'hidden';
      probe.style.height = `var(${varName})`;
      document.body.appendChild(probe);
      const px = getComputedStyle(probe).height;
      probe.remove();
      return px && px !== '0px' ? px : fallback;
    }

    function openMenu(): void {
      if (collapsedBar && expandedContent && !isExpanded) {
        isExpanded = true;
        window.__bottomBarExpanded = true;
        const pageEl = document.getElementById('page');
        window.__lenis?.stop?.();
        if (pageEl) {
          // Start from 0 each open
          pageEl.setAttribute('data-blurred', 'true');
          pageEl.setAttribute('inert', '');
          gsap.fromTo(
            pageEl,
            { '--blur-p': 0 },
            {
              '--blur-p': 1,
              duration: MENU_DURATION,
              // ease: 'power2.out',
              onUpdate: () => {
                // Optional hook for midpoint logic
                // const val = gsap.getProperty(pageEl, '--blur-p');
              },
            }
          );
        }

        // Show overlay - refresh reference first to ensure we have the current DOM element
        refreshOverlayReference();

        if (currentOverlay) {
          gsap.to(currentOverlay, {
            autoAlpha: 1,
            opacity: 1,
            duration: MENU_DURATION * 1.3,
            ease: 'power2.out',
            onStart: () => {
              currentOverlay!.style.pointerEvents = 'auto';
            },
          });
        }
        // (Legacy ENABLE_PAGE_SCALE logic removed)
        gsap.to(leftGroup, {
          opacity: 0, // fade only; don't affect layout/visibility to avoid reflow quirks
          duration: MENU_DURATION,
          ease: 'power2.out',
          onStart: () =>
            leftGroup.forEach((el) =>
              el ? (el.style.pointerEvents = 'none') : null
            ),
        });
        // Stop hover animation and reset to default state
        hoverTl.pause();
        gsap.set(rLogo, { y: 0 });
        gsap.set(defaultText, { y: 0 });
        gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE });
        gsap.set(hoverText, { y: ANIMATION_DISTANCE });

        // Animate icon transition (Plus to Minus)
        gsap.to(plusIcon, {
          opacity: 0,
          rotation: 90,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(minusIcon, {
          opacity: 1,
          rotation: 0,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });

        // Animate bar expansion upward
        gsap.to(collapsedBar, {
          height: 'auto',
          duration: MENU_DURATION,
          ease: 'power2.out',
        });

        // Make collapsed bar background transparent to avoid double-layer darkening
        gsap.to(collapsedBar, {
          '--collapsed-bg-alpha': 0,
          duration: MENU_DURATION,
          ease: 'power2.out',
        });
        if (blurredBackground) {
          gsap.to(blurredBackground, {
            opacity: 0.80,
            duration: MENU_DURATION,
            ease: 'power2.out',
          });
        }

        // Animate expanded content in
        const startH = resolveVarPx('--navbar-height'); // e.g., "64px"

        gsap.fromTo(
          expandedContent,
          { height: startH, opacity: 1 }, // force start height
          {
            height: 'auto', // grow to natural height
            opacity: 1,
            duration: MENU_DURATION * 1.2,
            ease: 'power2.in',
            onStart: () => {
              expandedContent.style.pointerEvents = 'auto';
            },
          }
        );

        gsap.to(menuContainer, {
          opacity: 1,
          duration: MENU_DURATION * 1.8,
          ease: 'power2.in',
        });
      }
    }

    function closeMenuFuncLocal(): void {
      if (collapsedBar && expandedContent && isExpanded) {
        document.body.classList.remove('menu-open');
        window.__lenis?.start?.();

        isExpanded = false;
        window.__bottomBarExpanded = false;
        const pageEl = document.getElementById('page');
        if (pageEl) {
          if (keepBlurForNavigation) {
            // Keep blur state for navigation - don't animate blur-p to 0
            // Just remove inert to allow interaction, but keep data-blurred
            pageEl.removeAttribute('inert');
          } else {
            // Normal menu close - reset blur with coordinated timing
            gsap.to(pageEl, {
              '--blur-p': 0,
              duration: MENU_DURATION,
              ease: 'power2.out',
              onComplete: () => {
                // Remove blur attributes only after scaling is complete
                pageEl.removeAttribute('data-blurred');
                pageEl.removeAttribute('inert');
              },
            });
          }
        }

        // Hide overlay - refresh reference first to ensure we have the current DOM element
        refreshOverlayReference();

        if (currentOverlay) {
          if (keepBlurForNavigation) {
            currentOverlay.style.pointerEvents = 'none';
          } else {
            gsap.to(currentOverlay, {
              autoAlpha: 0,
              opacity: 0,
              duration: MENU_DURATION * 0.9, // Slightly faster than blur removal
              ease: 'power2.out',
              onComplete: () => {
                currentOverlay!.style.pointerEvents = 'none';
              },
            });
          }
        }

        // Animate icon transition (Minus to Plus)
        gsap.to(minusIcon, {
          opacity: 0,
          rotation: 90,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(plusIcon, {
          opacity: 1,
          rotation: 0,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(leftGroup, {
          opacity: 1,
          duration: MENU_DURATION,
          ease: 'power2.in',
          onComplete: () =>
            leftGroup.forEach((el) =>
              el ? (el.style.pointerEvents = 'auto') : null
            ),
        });

        // Restore collapsed bar background when closing
        gsap.to(collapsedBar, {
          '--collapsed-bg-alpha': 1,
          duration: MENU_DURATION,
          ease: 'power2.in',
        });

        if (blurredBackground) {
          gsap.to(blurredBackground, {
            opacity: 1,
            duration: MENU_DURATION,
            ease: 'power2.in',
          });
        }
        // Animate expanded content out
        gsap.to(expandedContent, {
          height: 'var(--navbar-height)',
          opacity: 1,
          duration: MENU_DURATION * 1.2,
          ease: 'power2.out',
          onComplete: () => {
            expandedContent.style.pointerEvents = 'none';
          },
        });

        gsap.to(menuContainer, {
          opacity: 0,
          duration: MENU_DURATION * 0.8,
          ease: 'power2.out',
        });

        // Animate bar back to original size
        // gsap.to(collapsedBar, {
        //   height: 'var(--navbar-height)',
        //   duration: MENU_DURATION,
        //   ease: 'power2.in',
        // });
      }
    }

    // Assign to global reference for overlay event listener
    closeMenuFunc = closeMenuFuncLocal;

    // Initialize overlay reference after closeMenuFunc is set
    refreshOverlayReference();

    // Event listeners
    mainBarContent?.addEventListener('click', (e) => {
      // Prevent button click from bubbling to mainBarContent
      if (
        e.target &&
        e.target instanceof Element &&
        e.target.closest('#menu-toggle-button')
      ) {
        return;
      }
      if (isExpanded) {
        closeMenuFuncLocal();
      } else {
        openMenu();
      }
    });

    // Button click handlers
    menuToggleButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      if (isExpanded) {
        closeMenuFuncLocal();
      } else {
        openMenu();
      }
    });

    // Logo click closes menu
    const logoCloseMenu = document.getElementById('logo-close-menu');
    logoCloseMenu?.addEventListener('click', (e) => {
      if (isExpanded && !isNavigatingAfterMenuClose) {
        e.preventDefault(); // Prevent immediate navigation
        const href = logoCloseMenu.getAttribute('href') || '/';
        keepBlurForNavigation = true; // Keep blur for navigation
        closeMenuFuncLocal();
        // Navigate after menu closes
        setTimeout(() => {
          isNavigatingAfterMenuClose = true;
          // Temporarily remove the data attribute to allow normal navigation
          logoCloseMenu.removeAttribute('data-close-menu');
          (logoCloseMenu as HTMLAnchorElement).click();
          // Restore the attribute after navigation
          setTimeout(() => {
            logoCloseMenu.setAttribute('data-close-menu', 'true');
            isNavigatingAfterMenuClose = false;
            keepBlurForNavigation = false; // Reset flag
          }, 100);
        }, MENU_DURATION * 100);
      }
    });

    // Handle all navigation links with data-close-menu attribute
    const navLinks = document.querySelectorAll('a[data-close-menu="true"]');
    navLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        if (isExpanded && !isNavigatingAfterMenuClose) {
          e.preventDefault(); // Prevent immediate navigation
          keepBlurForNavigation = true; // Keep blur for navigation
          closeMenuFuncLocal();
          // Navigate after menu closes
          setTimeout(() => {
            isNavigatingAfterMenuClose = true;
            // Temporarily remove the data attribute to allow normal navigation
            link.removeAttribute('data-close-menu');
            (link as HTMLAnchorElement).click();
            link.setAttribute('data-close-menu', 'true');
            isNavigatingAfterMenuClose = false;
            keepBlurForNavigation = false;
          }, MENU_DURATION * 100);
        }
      });
    });

    closeMenu?.addEventListener('click', closeMenuFuncLocal);

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const bottomBar = document.getElementById('bottom-bar');
      if (
        bottomBar &&
        e.target instanceof Node &&
        !bottomBar.contains(e.target) &&
        isExpanded
      ) {
        closeMenuFuncLocal();
      }
    });
  }

  // Function to update active states after navigation
  function updateActiveStates(): void {
    const currentPath = window.location.pathname;
    const normalizePath = (p: string) =>
      p === '/' ? '/' : p.replace(/\/+$/, '');
    // Get all navigation links
    const navLinks = document.querySelectorAll('.page-navigator a');
    closeMenuFunc?.();

    navLinks.forEach((link) => {
      if (link instanceof HTMLAnchorElement) {
        const href = link.getAttribute('href');
        if (!href) return;

        const nHref = normalizePath(href);
        const nCurrent = normalizePath(currentPath);
        const isExact = nCurrent === nHref;
        const isActive =
          nHref === '/'
            ? isExact
            : nCurrent === nHref || nCurrent.startsWith(nHref + '/');

        // Update classes
        link.classList.toggle('-active', isActive);
        link.classList.toggle('-exact', isExact);
      }
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initBottomBar();
      updateActiveStates();
    });
  } else {
    initBottomBar();
    updateActiveStates();
  }

  // Re-initialize after page transitions
  document.addEventListener('astro:page-load', () => {
    initBottomBar();
    setTimeout(() => {
      // Delay to ensure DOM is updated
      updateActiveStates();
    }, 100);
  });
</script>
