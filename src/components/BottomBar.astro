---
import { Plus, Minus } from 'lucide-react';

// BottomBar.astro - Persistent bottom navigation component
---

<!-- Overlay (dark + blur) -->
<div
  id='bottom-bar-overlay'
  class='fixed inset-0 opacity-0 pointer-events-none z-[9] bg-black/40 will-change-[opacity]'
>
</div>

<div id='page-frame' class='fixed inset-0 pointer-events-none z-[11] opacity-0'>
  <!-- <div data-frame='top' class='absolute inset-x-0 top-0 h-px bg-primary'></div>
  <div data-frame='left' class='absolute left-0 top-0 bottom-0 w-px bg-primary'>
  </div>
  <div
    data-frame='right'
    class='absolute right-0 top-0 bottom-0 w-px bg-primary'
  >
  </div> -->
</div>
<!-- Persistent Bottom Bar -->
<nav
  id='bottom-bar'
  class='fixed bottom-[var(--navbar-bottom)] transform h-[var(--navbar-height)] left-[var(--navbar-left)] z-10 w-navbar'
>
  <!-- Collapsed Bar -->
  <div
    id='collapsed-bar'
    class='bg-black cursor-pointer relative z-20 backdrop-blur-md text-white rounded-[20px] transition-all duration-300 hover:bg-black/95 flex flex-col'
  >
    <!-- Main Bar Content -->
    <div
      id='main-bar-content'
      class='h-[var(--navbar-height)] flex items-center justify-between px-[12px] gap-1 lg:px-[24px]'
    >
      <!-- SVG Container with overflow hidden for slide animation -->
      <div class='relative w-8 h-8 overflow-hidden' id='svg-container'>
        <!-- Original R logo -->
        <div
          id='r-logo'
          class='w-8 h-8 absolute flex items-center justify-center'
        >
          <svg
            width='24'
            height='24'
            viewBox='0 0 31 50'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
            data-letter='r'
            preserveAspectRatio='xMidYMid meet'
          >
            <path
              fill-rule='evenodd'
              clip-rule='evenodd'
              d='M16.8815 49.1619V40L0 40V90C0 90 3.01762 70.6614 12 64C17.9391 59.5955 30 58.1272 30 58.1272V40C28.8737 40.107 27.7341 40.0644 26.6133 40.0225C22.6745 39.8753 18.967 42.7685 16.8815 49.1619Z'
              fill='currentColor'
              class='fill-white'
              transform='translate(0, -40)'></path>
          </svg>
        </div>

        <!-- Arrow up icon (starts below view) -->
        <div
          id='arrow-icon'
          class='w-8 h-8 absolute flex items-center justify-center'
        >
          <svg
            xmlns='http://www.w3.org/2000/svg'
            width='24'
            height='24'
            viewBox='0 0 22 22'
            ><path
              fill='currentColor'
              d='M10 3H8v1H7v1H6v1H5v1H4v2h2V8h1V7h1v4h1v2h1v1h2v1h7v-2h-6v-1h-2v-2h-1V7h1v1h1v1h2V7h-1V6h-1V5h-1V4h-1'
            ></path>
          </svg>
        </div>
      </div>

      <!-- Text Container with overflow hidden for slide animation -->
      <div
        class='relative overflow-hidden h-6 flex-1 ml-0 text-sm font-light'
        id='text-container'
      >
        <!-- Default text -->
        <div
          class='absolute w-full h-full flex items-center'
          id='default-text'
          style='top: 0;'
        >
          <span>Portfolio</span>
        </div>

        <!-- Hover text (starts below view) -->
        <div class='absolute w-full h-full flex items-center' id='hover-text'>
          <span>Open Menu</span>
        </div>
      </div>
      <button class='relative z-[999]' id='menu-toggle-button'>
        <!-- Plus icon container -->
        <div
          id='plus-icon'
          class='absolute -translate-x-1/2 -left-2 top-1/2 -translate-y-1/2'
        >
          <Plus size={24} className='cursor-pointer' />
        </div>
        <!-- Minus icon container (hidden initially) -->
        <div
          id='minus-icon'
          class='absolute -translate-x-1/2 -left-2 top-1/2 -translate-y-1/2'
        >
          <Minus size={24} className='cursor-pointer' />
        </div>
        <span class='span-menu'>Open / Close Menu</span>
      </button>
    </div>
  </div>

  <!-- Expanded Menu Content (hidden by default) -->
  <div
    id='expanded-content'
    class='opacity-0 absolute bottom-0 w-full rounded-[20px] pointer-events-none overflow-hidden z-10'
    style='height: 0;'
  >
    <div class='blurred-background h-full absolute w-full'></div>
    <div>
      <p class='h-[750px]'>gyattt</p>
    </div>
  </div>
</nav>

<style>
  .span-menu {
    position: absolute;
    width: calc(var(--navbar-width) + 16px);
    height: calc(100% + 32px);
    right: -24px;
    top: -16px;
    overflow: hidden;
    opacity: 0;
    cursor: pointer;
  }

  .blurred-background {
    position: absolute;
    inset: 0;
    /* GLASS BACKGROUND (lighter so backdrop shows through) */
    background:
      /* linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.1) 0%,
        rgba(255, 255, 255, 0.04) 45%,
        rgba(255, 255, 255, 0) 100%
      ), */
      /* tinted body */ linear-gradient(
      0deg,
      rgba(17, 25, 40, 0.8),
      rgba(17, 25, 40, 0.8)
    );

    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: inherit;
    background-clip: padding-box;
    box-shadow:
      0 4px 24px -8px rgba(0, 0, 0, 0.6),
      0 0 0 1px rgba(255, 255, 255, 0.04) inset,
      0 1px 0 0 rgba(255, 255, 255, 0.1) inset;
    overflow: hidden;
    isolation: isolate; /* allow noise blend inside */
    /* improve blur performance by isolating only when expanded */
    will-change: backdrop-filter, background-color;
  }

  /* subtle grain overlay */
  .blurred-background::after {
    content: '';
    position: absolute;
    inset: 0;
    pointer-events: none;
    /* SVG fractal noise as data URI */
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='128' height='128'><filter id='n'><feTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='2' stitchTiles='stitch'/></filter><rect width='100%' height='100%' filter='url(%23n)' opacity='0.35'/></svg>");
    background-size: 128px 128px;
    opacity: 0.06; /* grain strength */
    mix-blend-mode: overlay; /* sits nicely on light/dark */
  }

  /* Fallback when backdrop-filter unsupported */
  @supports not ((backdrop-filter: blur(1px))) {
    .blurred-background {
      background: linear-gradient(
          180deg,
          rgba(255, 255, 255, 0.06) 0%,
          rgba(255, 255, 255, 0.02) 45%,
          rgba(255, 255, 255, 0) 100%
        ),
        rgba(17, 25, 40, 0.9);
    }
  }
  #expanded-content {
    transform-origin: bottom;
    backdrop-filter: blur(12px) saturate(100%);
    -webkit-backdrop-filter: blur(12px) saturate(100%);
    will-change: transform, opacity, filter;
  }
</style>

<script>
  import { gsap } from 'gsap';

  // Animation constants
  const ANIMATION_DISTANCE = 32;
  const HOVER_DURATION = 1;
  const MENU_DURATION = 0.3;
  const style = window.getComputedStyle(document.body);

  // Toggle page background scaling on/off
  const ENABLE_PAGE_SCALE = true;

  const PAGE_RADIUS = style.getPropertyValue('--radius'); // match your bottom bar rounded-[20px]
  function getPageScale() {
    const v = getComputedStyle(document.documentElement).getPropertyValue(
      '--page-scale'
    );
    const n = parseFloat(v);
    return isNaN(n) ? 0.95 : n;
  }

  let PAGE_SCALE = getPageScale();
  // Compute Y offset so the top gap equals the side gap when scaling from bottom-center
  function getEqualizeY(scale: number) {
    const H = window.innerHeight;
    const W = window.innerWidth;
    const gTop = (1 - scale) * H; // natural top gap with origin at bottom
    const gSide = ((1 - scale) * W) / 2; // natural side gap
    return gTop - gSide; // move up by this to reduce top gap
  }
  const svgContainer = document.getElementById('svg-container');
  const textContainer = document.getElementById('text-container');
  const leftGroup = [svgContainer, textContainer];

  // Bottom bar menu functionality
  function initBottomBar() {
    const collapsedBar = document.getElementById('collapsed-bar');
    const expandedContent = document.getElementById('expanded-content');
    const closeMenu = document.getElementById('close-menu');
    const mainBarContent = document.getElementById('main-bar-content');
    const menuToggleButton = document.getElementById('menu-toggle-button');
    const plusIcon = document.getElementById('plus-icon');
    const minusIcon = document.getElementById('minus-icon');
    const overlay = document.getElementById('bottom-bar-overlay');
    const pageFrame = document.getElementById('page-frame');
    const getPageChildren = () =>
      Array.from(document.body.children).filter(
        (el) =>
          el.id !== 'bottom-bar' &&
          el.id !== 'bottom-bar-overlay' &&
          el.id !== 'page-frame'
      );

    // GSAP Animation elements
    const rLogo = document.getElementById('r-logo');
    const arrowIcon = document.getElementById('arrow-icon');
    const defaultText = document.getElementById('default-text');
    const hoverText = document.getElementById('hover-text');

    // Expanded state tracking
    let isExpanded = false;

    gsap.set(rLogo, { y: 0 }); // rLogo in view
    gsap.set(defaultText, { y: 0 }); // defaultText in view
    gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE }); // arrowIcon hidden above
    gsap.set(hoverText, { y: ANIMATION_DISTANCE }); // hoverText hidden below

    // Set initial icon states
    gsap.set(plusIcon, { opacity: 1, rotation: 0 });
    gsap.set(minusIcon, { opacity: 0, rotation: 90 });

    let hoverTl = gsap.timeline({ paused: true });

    hoverTl
      .to(
        rLogo,
        {
          y: -ANIMATION_DISTANCE,
          duration: HOVER_DURATION,
          ease: 'sine.inOut',
        },
        0
      )
      .to(arrowIcon, { y: 0, duration: HOVER_DURATION, ease: 'sine.inOut' }, 0)
      .to(
        defaultText,
        { y: ANIMATION_DISTANCE, duration: HOVER_DURATION, ease: 'sine.inOut' },
        0
      )
      .to(hoverText, { y: 0, duration: HOVER_DURATION, ease: 'sine.inOut' }, 0);

    hoverTl.eventCallback('onReverseComplete', () => {
      gsap.set(rLogo, { y: 0 });
      gsap.set(defaultText, { y: 0 });
      gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE });
      gsap.set(hoverText, { y: ANIMATION_DISTANCE });
    });

    // Mouse enter - play animation (only if not expanded)
    mainBarContent?.addEventListener('mouseenter', () => {
      if (!isExpanded) {
        hoverTl.play();
      }
    });

    // Mouse leave - reverse animation (only if not expanded)
    mainBarContent?.addEventListener('mouseleave', () => {
      if (!isExpanded) {
        hoverTl.reverse();
      }
    });

    function openMenu() {
      if (collapsedBar && expandedContent && !isExpanded) {
        isExpanded = true;
        // Show overlay
        if (overlay) {
          gsap.to(overlay, {
            autoAlpha: 1,
            duration: MENU_DURATION * 1.3,
            ease: 'power2.out',
            onStart: () => {
              overlay.style.pointerEvents = 'auto';
            },
          });
        }
        if (ENABLE_PAGE_SCALE) {
          // Recompute scale on open for current viewport (CSS driven)
          PAGE_SCALE = getPageScale();
          const pageChildren = getPageChildren();
          pageChildren.forEach((el) =>
            el && el instanceof HTMLElement
              ? (el.style.willChange =
                  'transform, clip-path, filter, top, left')
              : null
          );
          gsap.to(pageChildren, {
            scale: PAGE_SCALE,
            transformOrigin: '50% 100%', // bottom-center
            duration: MENU_DURATION * 1.2,
            ease: 'power2.out',
          });

          gsap.to(pageChildren, {
            clipPath: `inset(0 round ${PAGE_RADIUS} ${PAGE_RADIUS} 0 0)`,
            duration: MENU_DURATION * 1.2,
            ease: 'power2.out',
          });
          gsap.to(pageChildren, {
            filter: 'blur(0px)',
            duration: MENU_DURATION * 1.2,
            ease: 'power2.out',
          });
          if (pageFrame) {
            gsap.to(pageFrame, {
              autoAlpha: 1,
              duration: MENU_DURATION,
              ease: 'power2.out',
            });
          }
        }
        gsap.to(leftGroup, {
          opacity: 0, // fade only; don't affect layout/visibility to avoid reflow quirks
          duration: MENU_DURATION,
          ease: 'power2.out',
          onStart: () =>
            leftGroup.forEach((el) =>
              el ? (el.style.pointerEvents = 'none') : null
            ),
        });
        // Stop hover animation and reset to default state
        hoverTl.pause();
        gsap.set(rLogo, { y: 0 });
        gsap.set(defaultText, { y: 0 });
        gsap.set(arrowIcon, { y: -ANIMATION_DISTANCE });
        gsap.set(hoverText, { y: ANIMATION_DISTANCE });

        // Animate icon transition (Plus to Minus)
        gsap.to(plusIcon, {
          opacity: 0,
          rotation: 90,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(minusIcon, {
          opacity: 1,
          rotation: 0,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });

        // Animate bar expansion upward
        gsap.to(collapsedBar, {
          height: 'auto',
          duration: MENU_DURATION,
          ease: 'power2.out',
        });

        // Animate expanded content in
        gsap.to(expandedContent, {
          height: 'auto',
          opacity: 1,
          duration: MENU_DURATION * 1.2,
          ease: 'power2.in',
          onStart: () => {
            expandedContent.style.pointerEvents = 'auto';
          },
        });
      }
    }

    function closeMenuFunc() {
      if (collapsedBar && expandedContent && isExpanded) {
        if (ENABLE_PAGE_SCALE) {
          // Restore page scale, corners and hide black frame
          const pageChildren = getPageChildren();

          gsap.to(pageChildren, {
            scale: 1,
            transformOrigin: '50% 100%',
            duration: MENU_DURATION * 1.2,
            ease: 'power2.in',
          });
          gsap.to(pageChildren, {
            y: 0,
            duration: MENU_DURATION * 1.2,
            ease: 'power2.in',
          });
          gsap.to(pageChildren, {
            clipPath: 'inset(0 round 0 0 0 0)',
            duration: MENU_DURATION * 1.2,
            ease: 'power2.in',
            onComplete: () =>
              pageChildren.forEach((el) => {
                if (!el || !(el instanceof HTMLElement)) return;
                el.style.willChange = '';
                el.style.clipPath = '';
              }),
          });
          gsap.to(pageChildren, {
            filter: 'blur(0px)',
            duration: MENU_DURATION * 1.2,
            ease: 'power2.in',
            onComplete: () =>
              pageChildren.forEach((el) => {
                if (!el || !(el instanceof HTMLElement)) return;
                el.style.filter = '';
              }),
          });
          if (pageFrame) {
            gsap.to(pageFrame, {
              autoAlpha: 0,
              duration: MENU_DURATION,
              ease: 'power2.in',
            });
          }
        }
        isExpanded = false;

        // Hide overlay
        if (overlay) {
          gsap.to(overlay, {
            autoAlpha: 0,
            duration: MENU_DURATION * 1.3,
            ease: 'power2.in',
            onComplete: () => {
              // overlay.style.pointerEvents = 'none';
              // overlay.style.backgroundColor = '';
              // overlay.style.backdropFilter = '';
              // overlay.style.webkitBackdropFilter = '';
            },
          });
        }

        // Animate icon transition (Minus to Plus)
        gsap.to(minusIcon, {
          opacity: 0,
          rotation: 90,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(plusIcon, {
          opacity: 1,
          rotation: 0,
          duration: MENU_DURATION,
          ease: 'power2.inOut',
        });
        gsap.to(leftGroup, {
          opacity: 1,
          duration: MENU_DURATION,
          ease: 'power2.in',
          onComplete: () =>
            leftGroup.forEach((el) =>
              el ? (el.style.pointerEvents = 'auto') : null
            ),
        });
        // Animate expanded content out
        gsap.to(expandedContent, {
          height: 0,
          opacity: 0,
          duration: MENU_DURATION * 1.2,
          ease: 'power2.out',
          onComplete: () => {
            expandedContent.style.pointerEvents = 'none';
          },
        });

        // Animate bar back to original size
        // gsap.to(collapsedBar, {
        //   height: 'var(--navbar-height)',
        //   duration: MENU_DURATION,
        //   ease: 'power2.in',
        // });
      }
    }

    // Event listeners
    mainBarContent?.addEventListener('click', (e) => {
      // Prevent button click from bubbling to mainBarContent
      if (
        e.target &&
        e.target instanceof Element &&
        e.target.closest('#menu-toggle-button')
      ) {
        return;
      }
      openMenu();
    });

    // Button click handlers
    menuToggleButton?.addEventListener('click', (e) => {
      e.stopPropagation();
      if (isExpanded) {
        closeMenuFunc();
      } else {
        openMenu();
      }
    });

    // Clicking overlay closes the menu
    overlay?.addEventListener('click', () => {
      if (isExpanded) closeMenuFunc();
    });

    closeMenu?.addEventListener('click', closeMenuFunc);

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const bottomBar = document.getElementById('bottom-bar');
      if (
        bottomBar &&
        e.target instanceof Node &&
        !bottomBar.contains(e.target) &&
        isExpanded
      ) {
        closeMenuFunc();
      }
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBottomBar);
  } else {
    initBottomBar();
  }

  // Re-initialize after page transitions
  document.addEventListener('astro:page-load', initBottomBar);
</script>
