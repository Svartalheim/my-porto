---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import Navigation from "../components/Navigation.astro";
---

<html lang="en">
  <head>
    <ClientRouter />
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>

    <script>
      import { gsap } from "gsap";
      console.log("using GSAP: ", gsap.version);
    </script>

    <style is:global>
      /* Prevent horizontal scrolling during transitions */
      html {
        overflow-x: hidden;
      }

      /* CSS variables for consistent timing */
      :root {
        --transition-duration: 0.4s;
        --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
        --transition-delay: 0s;
      }

      /* Only apply transitions when View Transitions API is supported */
      .view-transition-enabled {
        view-transition-name: none;
      }

      .view-transition-enabled .page-container {
        view-transition-name: page;
        position: relative;
        width: 100%;
        min-height: 100vh;
      }

      /* Add this class during animation to prevent unwanted scrolling */
      .animating {
        overflow: hidden;
      }

      /* Control the animations with strict timing */
      ::view-transition-old(page) {
        animation: slide-out-down var(--transition-duration) var(--transition-timing) var(--transition-delay) both;
        z-index: -100;
        transform-origin: top left;
      }

      ::view-transition-new(page) {
        animation: slide-in-bottom var(--transition-duration) var(--transition-timing) var(--transition-delay) both;
        z-index: 100;
      }

      /* Main page transition keyframes */
      @keyframes slide-in-bottom {
        from {
          transform: translateY(75%);
          opacity: 1;
        }
        to {
          transform: translateY(0%);
          opacity: 1;
        }
      }

      @keyframes slide-out-down {
        from {
          transform: scale(1) rotate(0deg);
          opacity: 1;
        }
        to {
          transform: translate(1%, 1%) rotate(1deg) scale(0.95);
          opacity: 0.3;
        }
      }

      /* Force stacking contexts for transition elements */
      ::view-transition-group(root),
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation-duration: var(--transition-duration);
      }

      /* Ensure content inside the transition is visible */
      ::view-transition-image-pair(page) {
        isolation: auto;
      }

      ::view-transition-old(page),
      ::view-transition-new(page) {
        mix-blend-mode: normal;
      }

      /* Force hardware acceleration for smoother transitions */
      .view-transition-enabled .page-container {
        transform: translateZ(0);
        backface-visibility: hidden;
        will-change: transform;
      }

      /* Logo specific transitions - keeping your original logo animations */
      ::view-transition-old(logo) {
        animation: scaleOut 0.3s ease-in;
      }

      ::view-transition-new(logo) {
        animation: scaleIn 0.5s ease-out;
      }

      @keyframes scaleIn {
        from {
          transform: scale(0.8);
          opacity: 0;
        }
        to {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes scaleOut {
        from {
          transform: scale(1);
          opacity: 1;
        }
        to {
          transform: scale(1.1);
          opacity: 0;
        }
      }

      /* Smooth transitions for all elements */
      * {
        transition-property: transform, opacity, scale;
        transition-timing-function: var(--transition-timing);
      }

      /* Disable transitions during page load */
      .page-loading * {
        transition: none !important;
      }

      /* Development indicator styles */
      .dev-indicator {
        position: fixed;
        top: 1rem;
        right: 1rem;
        padding: 0.5rem 0.75rem;
        font-size: 0.75rem;
        font-family: monospace;
        border-radius: 0.25rem;
        opacity: 0.7;
        z-index: 50;
        color: white;
      }

      .dev-indicator.supported {
        background-color: #0c7040;
      }

      .dev-indicator.not-supported {
        background-color: #703030;
      }
    </style>
  </head>
  <body class="bg-gray-900 text-gray-50">
    <Navigation />
    <div class="page-container bg-white h-full" transition:name="page">
      <slot />
    </div>

    <!-- Development indicator for View Transitions support (only in dev) -->
    <div id="dev-indicator" class="dev-indicator" style="display: none;">
      View Transitions: <span id="transition-status">Checking...</span>
    </div>

    <script>
      // Check for View Transitions API support and enable features
      function initViewTransitions() {
        const hasViewTransition = "startViewTransition" in document;
        const devIndicator = document.getElementById("dev-indicator");
        const statusSpan = document.getElementById("transition-status");

        if (hasViewTransition) {
          console.log("View Transitions API is supported");
          document.documentElement.classList.add("view-transition-enabled");

          if (devIndicator && statusSpan) {
            devIndicator.classList.add("supported");
            statusSpan.textContent = "Enabled";
          }
        } else {
          console.warn("View Transitions API is NOT supported in this browser");

          if (devIndicator && statusSpan) {
            devIndicator.classList.add("not-supported");
            statusSpan.textContent = "Not Supported";
          }
        }

        // Show dev indicator only in development
        if (devIndicator && import.meta.env.DEV) {
          devIndicator.style.display = "block";
        }

        // Add animating class during transitions to prevent scrolling
        if (hasViewTransition) {
          document.addEventListener("astro:before-preparation", () => {
            document.documentElement.classList.add("animating");
          });

          document.addEventListener("astro:after-swap", () => {
            document.documentElement.classList.remove("animating");
          });
        }
      }

      // Initialize on page load
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initViewTransitions);
      } else {
        initViewTransitions();
      }

      // Cleanup on page unload
      window.addEventListener("beforeunload", () => {
        document.documentElement.classList.remove("view-transition-enabled");
        document.documentElement.classList.remove("animating");
      });
    </script>
  </body>
</html>
