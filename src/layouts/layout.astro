---
import "../styles/global.css";
import { ClientRouter } from "astro:transitions";
import Navigation from "../components/Navigation.astro";
---

<html lang="en">
  <head>
    <ClientRouter />
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inconsolata:wdth,wght@50..200,200..900&family=Inter:ital,wght@0,200..900;1,200..900&display=swap"
      rel="stylesheet"
    />

    <script>
      import { gsap } from "gsap";
      console.log("using GSAP: ", gsap.version);
    </script>

    <style is:global>
      /* Prevent horizontal scrolling during transitions */
      html {
        overflow-x: hidden;
      }

      /* CSS variables for consistent timing */
      :root {
        --transition-duration: 0.4s;
        --transition-timing: cubic-bezier(0.4, 0, 0.2, 1);
        --transition-delay: 0s;
      }

      /* Only apply transitions when View Transitions API is supported */
      .view-transition-enabled {
        view-transition-name: none;
      }

      .view-transition-enabled .page-container {
        view-transition-name: page;
        position: relative;
        width: 100%;
        min-height: 100vh;
      }

      /* Add this class during animation to prevent unwanted scrolling */
      .animating {
        overflow: hidden;
      }

      /* Control the animations with strict timing */
      ::view-transition-old(page) {
        animation: slide-out-down var(--transition-duration) var(--transition-timing) var(--transition-delay) both;
        z-index: -100;
        transform-origin: top left;
      }

      ::view-transition-new(page) {
        animation: slide-in-bottom var(--transition-duration) var(--transition-timing) var(--transition-delay) both;
        z-index: 100;
      }

      /* Main page transition keyframes */
      @keyframes slide-in-bottom {
        from {
          transform: translateY(75%);
          opacity: 1;
        }
        to {
          transform: translateY(0%);
          opacity: 1;
        }
      }

      @keyframes slide-out-down {
        from {
          transform: scale(1) rotate(0deg);
          opacity: 1;
        }
        to {
          transform: translate(1%, 1%) rotate(1deg) scale(0.95);
          opacity: 0.3;
        }
      }

      /* Force stacking contexts for transition elements */
      ::view-transition-group(root),
      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation-duration: var(--transition-duration);
      }

      /* Ensure content inside the transition is visible */
      ::view-transition-image-pair(page) {
        isolation: auto;
      }

      ::view-transition-old(page),
      ::view-transition-new(page) {
        mix-blend-mode: normal;
      }

      /* Force hardware acceleration for smoother transitions */
      .view-transition-enabled .page-container {
        transform: translateZ(0);
        backface-visibility: hidden;
        will-change: transform;
      }

      /* Logo specific transitions - keeping your original logo animations */
      ::view-transition-old(logo) {
        animation: scaleOut 0.3s ease-in;
      }

      ::view-transition-new(logo) {
        animation: scaleIn 0.5s ease-out;
      }

      @keyframes scaleIn {
        from {
          transform: scale(0.8);
          opacity: 0;
        }
        to {
          transform: scale(1);
          opacity: 1;
        }
      }

      @keyframes scaleOut {
        from {
          transform: scale(1);
          opacity: 1;
        }
        to {
          transform: scale(1.1);
          opacity: 0;
        }
      }

      /* Smooth transitions for all elements */
      * {
        transition-property: transform, opacity, scale;
        transition-timing-function: var(--transition-timing);
      }

      /* Disable transitions during page load */
      .page-loading * {
        transition: none !important;
      }

      /* Development indicator styles */
      .dev-indicator {
        position: fixed;
        top: 1rem;
        right: 1rem;
        padding: 0.5rem 0.75rem;
        font-size: 0.75rem;
        font-family: monospace;
        border-radius: 0.25rem;
        opacity: 0.7;
        z-index: 50;
        color: white;
      }

      .dev-indicator.supported {
        background-color: #0c7040;
      }

      .dev-indicator.not-supported {
        background-color: #703030;
      }
    </style>
  </head>
  <body class="bg-gray-900 text-primary">
    <!-- <Navigation /> -->
    <div class="page-container bg-background h-full" transition:name="page">
      <slot />
    </div>

    <!-- Persistent Bottom Bar -->
    <div id="bottom-bar" class="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50">
      <!-- Collapsed Bar -->
      <div id="collapsed-bar" class="bg-black/90 backdrop-blur-md text-white px-6 py-3 rounded-full border border-white/20 cursor-pointer transition-all duration-300 hover:bg-black/95">
        <div class="flex items-center gap-3">
          <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
          <span class="text-sm font-medium">Menu</span>
          <svg class="w-4 h-4 transition-transform duration-300" id="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </div>
      </div>

      <!-- Expanded Menu -->
      <div id="expanded-menu" class="bg-black/90 backdrop-blur-md text-white rounded-2xl border border-white/20 p-6 min-w-[300px] opacity-0 scale-95 pointer-events-none transition-all duration-300">
        <div class="flex flex-col space-y-4">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Navigation</h3>
            <button id="close-menu" class="text-white/60 hover:text-white transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Menu Items -->
          <a href="/" data-astro-prefetch class="flex items-center gap-3 p-3 rounded-lg hover:bg-white/10 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
            </svg>
            <span>Home</span>
          </a>
          
          <a href="/about" data-astro-prefetch class="flex items-center gap-3 p-3 rounded-lg hover:bg-white/10 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span>About</span>
          </a>
          
          <a href="/projects" data-astro-prefetch class="flex items-center gap-3 p-3 rounded-lg hover:bg-white/10 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            <span>Projects</span>
          </a>
          
          <a href="/contact" data-astro-prefetch class="flex items-center gap-3 p-3 rounded-lg hover:bg-white/10 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 7.89a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            <span>Contact</span>
          </a>
        </div>
      </div>
    </div>

    <!-- Development indicator for View Transitions support (only in dev) -->
    <div id="dev-indicator" class="dev-indicator" style="display: none;">
      View Transitions: <span id="transition-status">Checking...</span>
    </div>

    <script>
      // Check for View Transitions API support and enable features
      function initViewTransitions() {
        const hasViewTransition = "startViewTransition" in document;
        const devIndicator = document.getElementById("dev-indicator");
        const statusSpan = document.getElementById("transition-status");

        if (hasViewTransition) {
          console.log("View Transitions API is supported");
          document.documentElement.classList.add("view-transition-enabled");

          if (devIndicator && statusSpan) {
            devIndicator.classList.add("supported");
            statusSpan.textContent = "Enabled";
          }
        } else {
          console.warn("View Transitions API is NOT supported in this browser");

          if (devIndicator && statusSpan) {
            devIndicator.classList.add("not-supported");
            statusSpan.textContent = "Not Supported";
          }

          // Show dev indicator only in development
          if (devIndicator && import.meta.env.DEV) {
            devIndicator.style.display = "block";
          }

          // Add animating class during transitions to prevent scrolling
          if (hasViewTransition) {
            document.addEventListener("astro:before-preparation", () => {
              document.documentElement.classList.add("animating");
            });

            document.addEventListener("astro:after-swap", () => {
              document.documentElement.classList.remove("animating");
            });
          }
        }
      }
      // Initialize on page load
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initViewTransitions);
      } else {
        initViewTransitions();
      }

      // Cleanup on page unload
      window.addEventListener("beforeunload", () => {
        document.documentElement.classList.remove("view-transition-enabled");
        document.documentElement.classList.remove("animating");
      });

      // Bottom bar menu functionality
      const collapsedBar = document.getElementById('collapsed-bar');
      const expandedMenu = document.getElementById('expanded-menu');
      const closeMenu = document.getElementById('close-menu');
      const menuIcon = document.getElementById('menu-icon');

      function openMenu() {
        if (collapsedBar && expandedMenu && menuIcon) {
          collapsedBar.style.opacity = '0';
          collapsedBar.style.pointerEvents = 'none';
          
          expandedMenu.style.opacity = '1';
          expandedMenu.style.transform = 'scale(1)';
          expandedMenu.style.pointerEvents = 'auto';
          
          menuIcon.style.transform = 'rotate(90deg)';
        }
      }

      function closeMenuFunc() {
        if (collapsedBar && expandedMenu && menuIcon) {
          collapsedBar.style.opacity = '1';
          collapsedBar.style.pointerEvents = 'auto';
          
          expandedMenu.style.opacity = '0';
          expandedMenu.style.transform = 'scale(0.95)';
          expandedMenu.style.pointerEvents = 'none';
          
          menuIcon.style.transform = 'rotate(0deg)';
        }
      }

      // Event listeners
      collapsedBar?.addEventListener('click', openMenu);
      closeMenu?.addEventListener('click', closeMenuFunc);
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        const bottomBar = document.getElementById('bottom-bar');
        if (bottomBar && e.target instanceof Node && !bottomBar.contains(e.target)) {
          closeMenuFunc();
        }
      });

      // Re-initialize after page transitions
      document.addEventListener('astro:page-load', () => {
        const newCollapsedBar = document.getElementById('collapsed-bar');
        const newExpandedMenu = document.getElementById('expanded-menu');
        const newCloseMenu = document.getElementById('close-menu');
        
        newCollapsedBar?.addEventListener('click', openMenu);
        newCloseMenu?.addEventListener('click', closeMenuFunc);
      });
    </script>
  </body>
</html>
